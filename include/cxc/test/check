#pragma once

#include <cxc/test/fail>
#include <cxc/test/scope>

#define CXC_CHECK(value) cxc::test::check(value, cxc::test::scope::local(), __FILE__, __LINE__)

namespace cxc
{
    namespace test
    {
        template <typename value_type>
        class check
        {
        public:
            check(const value_type& value, const scope& source, const char* file, int line)
                : m_value(value)
            {
            }

            void ensure(bool result, const std::string& message) const
            {
                if (!result)
                    throw fail(message, m_source, m_file, m_line);
            }

            template <typename another_type>
            void operator == (const another_type& another) const
            {
                ensure(m_value == another, "X == Y"); // TODO: lazy formatter
            }

            template <typename another_type>
            void operator != (const another_type& another) const
            {
                ensure(m_value != another, "X != Y"); // TODO: lazy formatter
            }

            template <typename another_type>
            void operator < (const another_type& another) const
            {
                ensure(m_value < another, "X < Y"); // TODO: lazy formatter
            }

            template <typename another_type>
            void operator > (const another_type& another) const
            {
                ensure(m_value > another, "X > Y"); // TODO: lazy formatter
            }

            template <typename another_type>
            void operator <= (const another_type& another) const
            {
                ensure(m_value <= another, "X <= Y"); // TODO: lazy formatter
            }

            template <typename another_type>
            void operator >= (const another_type& another) const
            {
                ensure(m_value >= another, "X >= Y"); // TODO: lazy formatter
            }

            void operator ! () const
            {
                ensure(!m_value, "!X"); // TODO: lazy formatter
            }

            template <class exception_type>
            void expect_exception()
            {
                try
                {
                    m_value();
                }
                catch (exception_type&)
                {
                    // OK
                }
                ensure(false, "Exception expected.");
            }

        private:
            const value_type& m_value;
            const scope& m_source;
            const char* file;
            int line;
        };
    }
}
